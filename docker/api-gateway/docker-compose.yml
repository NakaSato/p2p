version: '3.8'

services:
  # Development service with hot reload
  api-gateway-dev:
    build:
      context: ../..
      dockerfile: docker/api-gateway/Dockerfile.dev
    container_name: rust-api-gateway-dev
    ports:
      - "3000:3000"
    volumes:
      - ../../api-gateway:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    environment:
      - RUST_LOG=debug
      - PORT=3000
      - DATABASE_URL=postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading
      - REDIS_URL=redis://redis:6379
    env_file:
      - ../../api-gateway/.env.example
    networks:
      - p2p-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    profiles:
      - dev
      - development

  # Production service
  api-gateway:
    build:
      context: ../..
      dockerfile: docker/api-gateway/Dockerfile
    container_name: rust-api-gateway
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=info
      - PORT=3000
      - DATABASE_URL=postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading
      - REDIS_URL=redis://redis:6379
      - SUBSTRATE_WS_URL=ws://substrate-node:9944
      - JWT_SECRET=production-secret-change-me
    env_file:
      - ../../api-gateway/.env.example
    networks:
      - p2p-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    profiles:
      - prod
      - production

networks:
  p2p-network:
    external: true

volumes:
  cargo-cache:
  target-cache:
