services:
  # Anchor Development Environment (includes Solana validator)
  solana-validator:
    build:
      context: ./docker/solana-validator
      dockerfile: Dockerfile
    container_name: p2p-anchor-dev
    ports:
      - "8898:8899"  # JSON RPC (avoiding conflict with Anchor tests)
      - "8901:8900"  # WebSocket
      - "8001:8001"  # Gossip
    volumes:
      - solana_ledger:/opt/solana/ledger
      - .:/workspaces/p2p
      - ./programs:/workspaces/programs
      - ./contracts:/workspaces/contracts
    networks:
      - p2p-network
    restart: unless-stopped
    environment:
      RUST_LOG: "solana=info"
      START_VALIDATOR: "true"  # Set to false for dev mode only
    healthcheck:
      test: ["CMD-SHELL", "solana cluster-version --url http://localhost:8899 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: p2p-postgres
    environment:
      POSTGRES_DB: p2p_energy_trading
      POSTGRES_USER: p2p_user
      POSTGRES_PASSWORD: p2p_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U p2p_user -d p2p_energy_trading"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB for Time-Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: p2p-timescaledb
    environment:
      POSTGRES_DB: p2p_timeseries
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_password
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./docker/timescaledb/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - p2p-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: p2p-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Apache Kafka for Message Queuing
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: p2p-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - p2p-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: p2p-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Smart Meter Simulator (Engineering Department)
  smart-meter-simulator:
    build:
      context: ./docker/smart-meter-simulator
      dockerfile: Dockerfile
    container_name: p2p-smart-meter-simulator
    depends_on:
      - kafka
      - postgres
      - timescaledb
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading
      TIMESCALE_URL: postgresql://timescale_user:timescale_password@timescaledb:5432/p2p_timeseries
      SIMULATION_INTERVAL: 900  # 15 minutes (Engineering AMI interval)
      NUM_METERS: 15  # Engineering Complex meter count
      BUILDING_TYPE: engineering_complex
      METER_PREFIX: ENG
      SOLAR_CAPACITY: 50.0  # 50kW solar array
    networks:
      - p2p-network
    restart: unless-stopped

  # Oracle Simulator (Solana Integration)
  oracle-simulator:
    build:
      context: ./docker/oracle-simulator
      dockerfile: Dockerfile
    container_name: p2p-oracle-simulator
    depends_on:
      - solana-validator
      - kafka
    environment:
      SOLANA_RPC_URL: http://solana-validator:8899
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      ORACLE_KEYPAIR_PATH: /opt/solana/oracle-keypair.json
      PROCESSING_INTERVAL: 900  # 15 minutes
      PROGRAM_DEPLOYMENTS_PATH: /tmp/program_deployments
      ORACLE_PROGRAM_ID: "OracleEngDeptAMI1234567890123456789"
    volumes:
      - program_deployments:/tmp/program_deployments
    networks:
      - p2p-network
    restart: unless-stopped

  # API Gateway (Rust Implementation with Solana) - DISABLED until api-gateway directory is created
  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #     dockerfile: Dockerfile
  #   container_name: p2p-api-gateway-rust
  #   depends_on:
  #     - postgres
  #     - redis
  #     - solana-validator
  #   ports:
  #     - "3001:3000"  # Changed to avoid Grafana conflict
  #   environment:
  #     DATABASE_URL: postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading
  #     REDIS_URL: redis://redis:6379
  #     SOLANA_RPC_URL: http://solana-validator:8899
  #     SOLANA_WS_URL: ws://solana-validator:8900
  #     JWT_SECRET: dev-secret-key-change-in-production
  #     PORT: 3000
  #     RUST_LOG: p2p_api_gateway=info,tower_http=info,axum::rejection=trace
  #     PROGRAM_DEPLOYMENTS_PATH: /tmp/program_deployments
  #     ENGINEERING_AUTHORITY: true
  #     VALIDATOR_MODE: single_engineering
  #   volumes:
  #     - program_deployments:/tmp/program_deployments
  #   networks:
  #     - p2p-network
  #   restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: p2p-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - p2p-network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: p2p-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - p2p-network
    restart: unless-stopped

  # Frontend - Development
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile.dev
    container_name: p2p-frontend-dev
    ports:
      - "5173:5173"  # Vite dev server default port
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001/api  # Updated to match API Gateway port
      - VITE_WS_URL=ws://localhost:3001
      - VITE_APP_ENV=development
      - VITE_APP_NAME=Engineering P2P Energy Trading
      - VITE_ENABLE_DEVTOOLS=true
      - VITE_SOLANA_RPC_URL=http://localhost:8899
    env_file:
      - ./docker/frontend/.env.development
    networks:
      - p2p-network
    depends_on:
      # - api-gateway  # DISABLED until api-gateway is created
      - solana-validator
    restart: unless-stopped
    profiles:
      - development
      - dev

  # Frontend - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: p2p-frontend
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=production
      - VITE_APP_NAME=Engineering P2P Energy Trading
      - VITE_ENABLE_DEVTOOLS=false
      - VITE_SOLANA_RPC_URL=http://localhost:8899
    env_file:
      - ./docker/frontend/.env.production
    networks:
      - p2p-network
    depends_on:
      # - api-gateway  # DISABLED until api-gateway is created
      - solana-validator
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - production
      - prod

volumes:
  solana_ledger:
  anchor_workspace:
  program_deployments:
  postgres_data:
  timescale_data:
  redis_data:
  zookeeper_data:
  kafka_data:
  grafana_data:
  prometheus_data:

networks:
  p2p-network:
    driver: bridge
