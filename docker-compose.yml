services:
  # Smart Contract Deployment Service - OPTIMIZED
  contact:
    build:
      context: ./docker/contact
      dockerfile: Dockerfile
    container_name: p2p-contact
    # Temporarily disabled validator dependency due to platform issues
    # depends_on:
    #   solana-validator:
    #     condition: service_healthy
    volumes:
      - .:/workspaces/p2p
      - ./programs:/workspaces/programs
      - ./contracts:/workspaces/contracts
      - contact_artifacts:/opt/deployer/artifacts
      - deployment_logs:/opt/deployer/logs
    networks:
      - p2p-network
    restart: "no"  # Run once deployment strategy
    environment:
      ANCHOR_PROVIDER_URL: "http://solana-validator:8899"
      # Can be overridden to use devnet: "https://api.devnet.solana.com"
      ANCHOR_WALLET: "/opt/deployer/config/deployer-keypair.json"
      RUST_LOG: "info"
      DEPLOYMENT_TIMEOUT: "300"  # 5 minutes
      MAX_RETRIES: "3"
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/verify-deployment.sh || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Anchor Development Chain (includes Solana validator)
  solana-validator:
    build:
      context: ./docker/solana-validator
      dockerfile: Dockerfile
    container_name: p2p-anchor-dev
    ports:
      - "8898:8899"  # JSON RPC (avoiding conflict with Anchor tests)
      - "8901:8900"  # WebSocket
      - "8001:8001"  # Gossip
    volumes:
      - solana_ledger:/opt/solana/ledger
      - .:/workspaces/p2p
      - ./programs:/workspaces/programs
      - ./contracts:/workspaces/contracts
    networks:
      - p2p-network
    restart: unless-stopped
    environment:
      RUST_LOG: "solana=info"
      START_VALIDATOR: "true"  # Set to false for dev mode only
      SKIP_DEPLOYMENT: "false"  # Set to true to skip automatic deployment
    healthcheck:
      test: ["CMD-SHELL", "/usr/local/bin/check-deployment.sh || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # PostgreSQL Database
  postgres:
    image: postgres:18
    container_name: p2p-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: p2p_energy_trading
      POSTGRES_USER: p2p_user
      POSTGRES_PASSWORD: p2p_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api-gateway/migrations:/docker-entrypoint-initdb.d
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U p2p_user -d p2p_energy_trading"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: p2p-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - p2p-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: p2p-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - p2p-network
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: p2p-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - p2p-network
    restart: unless-stopped

  # Oracle Simulator
  oracle-simulator:
    build:
      context: ./docker/oracle-simulator
    container_name: p2p-oracle-simulator
    depends_on:
      - solana-validator
      - postgres
    environment:
      SOLANA_RPC_URL: "http://solana-validator:8899"
      DATABASE_URL: "postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading"
      ORACLE_INTERVAL: "30"  # seconds
    networks:
      - p2p-network
    restart: unless-stopped

  # Smart Meter Simulator
  smart-meter-simulator:
    build:
      context: ./docker/smart-meter-simulator
    container_name: p2p-smart-meter-simulator
    depends_on:
      - postgres
      - kafka
    environment:
      DATABASE_URL: "postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading"
      KAFKA_BROKERS: "kafka:9092"
      METER_COUNT: "10"
      SIMULATION_INTERVAL: "60"  # seconds
    networks:
      - p2p-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api-gateway/Dockerfile
    container_name: p2p-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      # - solana-validator  # Temporarily disabled due to build issues
    environment:
      DATABASE_URL: "postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading"
      TIMESCALE_URL: "postgresql://p2p_user:p2p_password@postgres:5432/p2p_energy_trading"
      REDIS_URL: "redis://redis:6379"
      SOLANA_RPC_URL: "http://host.docker.internal:8899"
      SOLANA_WS_URL: "ws://host.docker.internal:8900"
      JWT_SECRET: "production-jwt-secret-key-change-me"
      API_KEY_SECRET: "production-api-key-secret-change-me"
      ENGINEERING_API_KEY: "engineering-department-api-key-2025"
      ENVIRONMENT: "production"
      PORT: "8080"
      MAX_CONNECTIONS: "50"
      REDIS_POOL_SIZE: "20"
      REQUEST_TIMEOUT: "30"
      RATE_LIMIT_WINDOW: "60"
      LOG_LEVEL: "info"
      AUDIT_LOG_ENABLED: "true"
      RUST_LOG: "api_gateway=info,tower_http=info,sqlx=warn"
    networks:
      - p2p-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: p2p-frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    environment:
      VITE_API_BASE_URL: "http://localhost:8080"
      VITE_SOLANA_RPC_URL: "http://localhost:8898"
    networks:
      - p2p-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./docker/nginx
    container_name: p2p-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
      - frontend
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - p2p-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: p2p-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - p2p-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: p2p-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - p2p-network
    restart: unless-stopped

volumes:
  solana_ledger:
  contact_artifacts:
  deployment_logs:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:

networks:
  p2p-network:
    driver: bridge