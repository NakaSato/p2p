name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      contracts: ${{ steps.changes.outputs.contracts }}
      docker: ${{ steps.changes.outputs.docker }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docs: ${{ steps.changes.outputs.docs }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          contracts:
            - 'contracts/**'
            - 'Cargo.toml'
            - 'Cargo.lock'
          docker:
            - 'docker/**'
            - 'docker-compose.yml'
          frontend:
            - 'frontend/**'
          docs:
            - 'docs/**'
            - '*.md'

  contracts-ci:
    name: Smart Contracts CI
    needs: changes
    if: needs.changes.outputs.contracts == 'true'
    uses: ./.github/workflows/contracts.yml
    secrets: inherit

  frontend-ci:
    name: Frontend CI
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    uses: ./.github/workflows/frontend.yml
    secrets: inherit

  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'

    - name: Lint markdown
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'
        ignore: 'node_modules'

  integration-test:
    name: Full System Integration Test
    runs-on: ubuntu-latest
    needs: [contracts-ci]
    if: |
      always() && 
      (needs.contracts-ci.result == 'success' || needs.contracts-ci.result == 'skipped')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup test environment
      run: |
        # Create test configuration
        cp .env.example .env.test
        echo "Setting up test environment..."

    - name: Start infrastructure services
      run: |
        echo "🚀 Starting P2P Energy Trading infrastructure..."
        
        # Start core infrastructure services
        docker compose up -d postgres timescaledb redis
        
        # Wait for infrastructure to be ready
        sleep 45
        
        # Start blockchain node
        docker compose up -d substrate-node
        
        # Wait for blockchain to initialize
        sleep 60

    - name: Run system health checks
      run: |
        echo "🏥 Running system health checks..."
        
        # Check container health
        docker compose ps
        
        # Check infrastructure services
        echo "Checking PostgreSQL..."
        if docker compose exec -T postgres pg_isready -U p2p_user -d p2p_energy_trading; then
          echo "✅ PostgreSQL is ready"
        else
          echo "❌ PostgreSQL failed"
          exit 1
        fi
        
        echo "Checking Redis..."
        if docker compose exec -T redis redis-cli ping | grep -q "PONG"; then
          echo "✅ Redis is ready"
        else
          echo "❌ Redis failed"
          exit 1
        fi
        
        echo "Checking Substrate node..."
        if curl -s -H 'Content-Type: application/json' -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}' http://localhost:9933 | grep -q "result"; then
          echo "✅ Substrate node is ready"
        else
          echo "❌ Substrate node failed"
          exit 1
        fi

    - name: Run API tests
      run: |
        echo "🧪 Running API integration tests..."
        
        # Start API Gateway
        docker compose up -d api-gateway
        sleep 30
        
        # Test health endpoint
        if curl -f http://localhost:3000/health; then
          echo "✅ API Gateway is responding"
        else
          echo "❌ API Gateway failed"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up test environment..."
        docker compose down -v
        docker system prune -f

  security-check:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, rust

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Semgrep Security Scan
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/rust
          p/javascript
          p/docker

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup performance test environment
      run: |
        echo "🚀 Setting up performance test environment..."
        
        # Start lightweight system for performance testing
        docker compose up -d postgres redis substrate-node
        sleep 60

    - name: Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        
        # Test database performance
        echo "Testing database connection performance..."
        
        # Test PostgreSQL connection speed
        time docker compose exec -T postgres pg_isready -U p2p_user -d p2p_energy_trading
        
        # Test Redis performance
        echo "Testing Redis performance..."
        docker compose exec -T redis redis-cli --latency-history -i 1 > redis_perf.log &
        REDIS_PID=$!
        sleep 10
        kill $REDIS_PID || true
        
        # Test Substrate node RPC performance
        echo "Testing Substrate RPC performance..."
        start_time=$(date +%s%N)
        response=$(curl -s -H 'Content-Type: application/json' -d '{"id":1, "jsonrpc":"2.0", "method": "system_health", "params":[]}' http://localhost:9933)
        end_time=$(date +%s%N)
        rpc_time=$(( (end_time - start_time) / 1000000 ))
        
        echo "RPC response time: ${rpc_time}ms"
        
        if [ $rpc_time -lt 1000 ]; then
          echo "✅ Performance test passed"
        else
          echo "❌ Performance test failed - RPC too slow"
          exit 1
        fi

    - name: Generate performance report
      run: |
        echo "## ⚡ Performance Test Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Duration**: Database and RPC tests" >> $GITHUB_STEP_SUMMARY
        echo "- **PostgreSQL**: ✅ Ready" >> $GITHUB_STEP_SUMMARY
        echo "- **Redis**: ✅ Ready" >> $GITHUB_STEP_SUMMARY
        echo "- **Substrate RPC**: ✅ Ready" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Passed" >> $GITHUB_STEP_SUMMARY

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v

  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [integration-test, security-check, performance-test]
    if: |
      always() && 
      github.ref == 'refs/heads/main' &&
      needs.integration-test.result == 'success' &&
      needs.security-check.result == 'success' &&
      (needs.performance-test.result == 'success' || needs.performance-test.result == 'skipped')
    
    steps:
    - name: Deployment Ready
      run: |
        echo "🎉 All checks passed! System is ready for deployment."
        echo "## 🚀 Deployment Gate Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Checks**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance Tests**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Status**: 🟢 Ready" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [contracts-ci, frontend-ci, integration-test, security-check]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.contracts-ci.result }}" == "failure" || 
              "${{ needs.frontend-ci.result }}" == "failure" || 
              "${{ needs.integration-test.result }}" == "failure" || 
              "${{ needs.security-check.result }}" == "failure" ]]; then
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Pipeline failed" >> $GITHUB_OUTPUT
        else
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Pipeline succeeded" >> $GITHUB_OUTPUT
        fi

    - name: Create status summary
      run: |
        echo "## 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Overall Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered By**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Time**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
