name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
  workflow_call:
    # Allow this workflow to be called by other workflows

env:
  NODE_VERSION: '22'

jobs:
  lint-and-test:
    name: Lint and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package.json'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check

    - name: Run tests
      run: |
        cd frontend
        npm run test:ci

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          frontend/coverage/
          frontend/test-results/
        retention-days: 7

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package.json'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build for ${{ matrix.environment }}
      run: |
        cd frontend
        if [ "${{ matrix.environment }}" = "production" ]; then
          npm run build
        else
          npm run build:dev
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.environment }}
        path: frontend/dist/
        retention-days: 30

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package.json'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-development
        path: frontend/dist/

    - name: Start preview server
      run: |
        cd frontend
        npm run preview &
        sleep 10

    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 7

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-production
        path: frontend/dist/

    - name: Install http-server
      run: npm install -g http-server

    - name: Start server
      run: |
        cd frontend/dist
        http-server -p 8080 &
        sleep 10

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './frontend/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  build-docker:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, build]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: frontend
        file: docker/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy Frontend to Staging
    runs-on: ubuntu-latest
    needs: [e2e-test, lighthouse-audit, build-docker]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download production build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-production
        path: ./build

    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying frontend to staging..."
        echo "Build artifacts ready for deployment"
        
        # Add actual deployment logic here
        # This could be:
        # - Deploy to Vercel/Netlify
        # - Upload to S3 + CloudFront
        # - Deploy to Kubernetes
        # - Copy to staging server
        
    - name: Run post-deployment tests
      run: |
        echo "ðŸ§ª Running post-deployment tests..."
        # Add smoke tests for deployed frontend
        
    - name: Create deployment summary
      run: |
        echo "## ðŸš€ Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Size**: $(du -sh build/ | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed At**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy Frontend to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download production build
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-production
        path: ./build

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying frontend to production..."
        echo "Build artifacts ready for production deployment"
        
        # Add actual production deployment logic here
        
    - name: Create production deployment summary
      run: |
        echo "## ðŸŽ‰ Frontend Production Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed At**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Live" >> $GITHUB_STEP_SUMMARY
