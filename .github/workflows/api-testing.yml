name: API Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  RUST_BACKTRACE: 1
  POSTGRES_PASSWORD: postgres
  REDIS_PASSWORD: redis_secret

jobs:
  api-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: p2p_energy_trading
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        env:
          REDIS_PASSWORD: redis_secret
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Setup database
      run: |
        cd api-gateway
        sqlx database create
        sqlx migrate run
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/p2p_energy_trading

    - name: Build API Gateway
      run: |
        cd api-gateway
        cargo build --release

    - name: Start API Gateway
      run: |
        cd api-gateway
        RUST_LOG=info \
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/p2p_energy_trading \
        REDIS_URL=redis://default:redis_secret@localhost:6379 \
        JWT_SECRET=test_jwt_secret_key_for_github_actions \
        API_HOST=0.0.0.0 \
        API_PORT=8080 \
        ./target/release/api-gateway &
        echo $! > api_gateway.pid
      env:
        RUST_LOG: info

    - name: Install Node.js and Newman
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Newman
      run: npm install -g newman

    - name: Wait for API Gateway
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8080/health > /dev/null; then
            echo "API Gateway is ready!"
            break
          fi
          echo "Waiting for API Gateway... (attempt $i/30)"
          sleep 2
        done

    - name: Run Integration Tests
      run: |
        cd docs/postman
        ./integration-test.sh
      env:
        API_BASE_URL: http://localhost:8080

    - name: Run Full Postman Test Suite
      run: |
        cd docs/postman
        newman run P2P_Energy_Trading_API.postman_collection.json \
          -e P2P_Energy_Trading_Local.postman_environment.json \
          --reporters cli,junit \
          --reporter-junit-export test-results.xml \
          --bail
      continue-on-error: true

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: API Test Results
        path: docs/postman/test-results.xml
        reporter: java-junit

    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          docs/postman/test-results.xml
          docs/postman/test-results/

    - name: Stop API Gateway
      if: always()
      run: |
        if [ -f api-gateway/api_gateway.pid ]; then
          kill $(cat api-gateway/api_gateway.pid) || true
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for vulnerabilities
      run: |
        cd api-gateway
        cargo audit --deny warnings

  performance-check:
    runs-on: ubuntu-latest
    needs: api-tests
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: p2p_energy_trading
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        env:
          REDIS_PASSWORD: redis_secret
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Install SQLx CLI
      run: cargo install sqlx-cli --no-default-features --features postgres

    - name: Setup database
      run: |
        cd api-gateway
        sqlx database create
        sqlx migrate run
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/p2p_energy_trading

    - name: Build API Gateway (Release)
      run: |
        cd api-gateway
        cargo build --release

    - name: Start API Gateway
      run: |
        cd api-gateway
        RUST_LOG=warn \
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/p2p_energy_trading \
        REDIS_URL=redis://default:redis_secret@localhost:6379 \
        JWT_SECRET=test_jwt_secret_key_for_performance_test \
        API_HOST=0.0.0.0 \
        API_PORT=8080 \
        ./target/release/api-gateway &
        echo $! > api_gateway.pid

    - name: Install Newman and Artillery
      run: |
        npm install -g newman artillery

    - name: Wait for API Gateway
      run: |
        for i in {1..30}; do
          if curl -s http://localhost:8080/health > /dev/null; then
            break
          fi
          sleep 2
        done

    - name: Performance Test
      run: |
        cd docs/postman
        newman run P2P_Energy_Trading_API.postman_collection.json \
          -e P2P_Energy_Trading_Local.postman_environment.json \
          --iteration-count 10 \
          --delay-request 100 \
          --reporters cli,json \
          --reporter-json-export performance-results.json
      continue-on-error: true

    - name: Analyze Performance Results
      run: |
        cd docs/postman
        if [ -f performance-results.json ]; then
          echo "Performance Test Summary:"
          jq -r '
            "Total Requests: \(.run.stats.requests.total)",
            "Average Response Time: \(.run.timings.responseAverage)ms",
            "95th Percentile: \(.run.timings.responseP95)ms",
            "Failed Requests: \(.run.stats.requests.failed)"
          ' performance-results.json
        fi

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: docs/postman/performance-results.json

    - name: Stop API Gateway
      if: always()
      run: |
        if [ -f api-gateway/api_gateway.pid ]; then
          kill $(cat api-gateway/api_gateway.pid) || true
        fi